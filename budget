#!/bin/env python3

#todo: catch errors (read budget_file)

# libraries
from datetime import date, timedelta

try:
    import readline
except ImportError:
    pass

class color:
    def text(color, string):
        colors = {"red": "\33[31m", "green": "\33[32m", "redbg": "\33[41m",
                  "greenbg": "\33[42m", "cend": "\33[0m" , "noc": ""}
        colored_string = colors[color] + string + colors["cend"]

        return colored_string

class dateinfo:
    def today(): # ("YYYY", "MM", "DD")
        date_today = date.today()
        year = date_today.strftime("%Y")
        month = date_today.strftime("%m")
        day = date_today.strftime("%d")

        return (year, month, day)

    def last_month():
        date_last_month = date.today().replace(day=1) - timedelta(days=1)
        year = date_last_month.strftime("%Y")
        month = date_last_month.strftime("%m")

        return (year, month)

    def string():
        date = dateinfo.today()
        year = str(date[0])
        month = str(date[1])
        day = str(date[2])
        datestring = year + "-" + month + "-" + day

        return datestring

class budgetfile:
    def read(path):
        budget = []

        with open(path, "r") as budgetfile:
            for line in budgetfile:
                line = line.strip("\n")
                line = line.split(";")

                entry = {"year": line[0], "month": line[1], "day":line[2],
                         "amount": float(line[3]), "purpose": line[4]}

                budget.extend([entry])

        return budget

    def write(path, budget):
        with open(path, "w") as budgetfile:
            for entry in budget:
                entry_format = "{year};{month};{day};{amount};{purpose}\n"
                entry_formatted = entry_format.format(**entry)

                budgetfile.write(entry_formatted)

class calculate:
    def budget(budget):
        saldo = 0
        income = 0
        expenses = 0

        for entry in budget:
            amount = entry["amount"]
            saldo += amount
            if amount > 0:
                income += amount
            else:
                expenses += amount
        calculation = {"saldo": saldo, "income": income,
                       "expenses": expenses}
        return calculation

class visualize:
    def as_text(budget_calculation):
        bc = budget_calculation
        saldo = str(bc["saldo"])
        income = color.text("green", str(bc["income"]))
        expenses = color.text("red", str(bc["expenses"]))
        vis_saldo = "Saldo: {} Income: {} Expenses: {}"
        vis_saldo = vis_saldo.format(saldo, income, expenses)

        print(vis_saldo)

if __name__ == "__main__":
    path = "/home/plensch/projects/budget/budget_file"
    budget = budgetfile.read(path)
    prompt = dateinfo.string() + " > "

    try:
        while True:
            userin = input(prompt)
            if userin == "p":
                visualize.as_text(calculate.budget(budget))
            elif userin == "q":
                budgetfile.write(path, budget)
                break

    except KeyboardInterrupt:
        print("\nAborting - No changes have been made.")









