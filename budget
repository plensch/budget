#!/bin/env python3

#todo: replace budget data (dict) with list and add translation dict
#todo: add tags to budget entries
#todo: clean up code tagged: '#HACK'

# libraries
from datetime import date, timedelta

try:
    import readline
except ImportError:
    pass

class color:
    def text(color, string):
        colors = {"red": "\33[31m", "green": "\33[32m", "redbg": "\33[41m",
                  "greenbg": "\33[42m", "cend": "\33[0m" , "noc": ""}
        colored_string = colors[color] + string + colors["cend"]

        return colored_string

class dateinfo:
    def today(): # ("YYYY", "MM", "DD")
        date_today = date.today()
        year = date_today.strftime("%Y")
        month = date_today.strftime("%m")
        day = date_today.strftime("%d")

        return (year, month, day)

    def last_month():
        date_last_month = date.today().replace(day=1) - timedelta(days=1)
        year = date_last_month.strftime("%Y")
        month = date_last_month.strftime("%m")

        return (year, month)

    def to_string(year, month, day):
        date_str = "{}-{}-{}".format(year, month, day)

        return date_str

class budgets:
    budget = []
    entry_dict = {"year": 0, "month": 1, "day": 2,
                  "amount": 3, "purpose": 4}

    def format_entry(year, month, day, amount, purpose):
        amount = round(float(amount), 2)
        entry = (year, month, day, amount, purpose)

        return entry

    def read_entry(entry, item):
        item_value = entry[budgets.entry_dict[item]]

        return item_value

    #HACK
    def translate_entry(entry):
        temp_tuple_list = list(zip(budgets.entry_dict, entry))
        entry_as_dict = {k: v for k,v in temp_tuple_list}

        return entry_as_dict

class budgetfile:
    def read(path):
        budget = []

        try:
            with open(path, "r") as budgetfile:
                for line in budgetfile:
                    line = line.strip("\n")
                    line = line.split(";")

                    year = line[0]
                    month = line[1]
                    day = line[2]
                    amount = float(line[3])
                    purpose = line[4]

                    entry = budgets.format_entry(year, month, day,
                                                 amount, purpose)

                    budget.extend([entry])

            return budget
        except:
            raise

    def write(path, budget):
        entry_format = "{year};{month};{day};{amount};{purpose}\n"
        try:
            with open(path, "w") as budgetfile:
                for entry in budget:
                    entry_as_dict = budgets.translate_entry(entry)
                    entry_formatted = entry_format.format(**entry_as_dict)

                    budgetfile.write(entry_formatted)
        except:
            raise

class transaction:
    def new(amount, purpose):
        date = dateinfo.today()
        year = date[0]
        month = date[1]
        day = date[2]

        transaction = budgets.format_entry(year, month, day,
                                           amount, purpose)

        return transaction

    def add(budget, transaction):
        budget = budget.extend([transaction])

        return budget

class calculate:
    def budget(budget):
        saldo = 0
        income = 0
        expenses = 0

        for entry in budget:
            amount = budgets.read_entry(entry, "amount")
            saldo += amount

            if amount > 0:
                income += amount
            else:
                expenses += amount

        saldo = round(saldo, 2)
        income = round(income, 2)
        expenses = round(expenses, 2)

        calculation = {"saldo": saldo, "income": income,
                       "expenses": expenses}

        return calculation

class visualize:
    def summary(budget_calculation):
        bc = budget_calculation
        saldo = str(bc["saldo"])
        income = color.text("green", str(bc["income"]))
        expenses = color.text("red", str(bc["expenses"]))
        vis_saldo = "Saldo: {} Income: {} Expenses: {}"
        vis_saldo = vis_saldo.format(saldo, income, expenses)

        print(vis_saldo)

if __name__ == "__main__":
    try:
        path = "/home/plensch/projects/budget/budget_file"
        budgets.budget = budgetfile.read(path)
        prompt = "> "
        visualize.summary(calculate.budget(budgets.budget))

        """
        while True:
            userin = input(prompt)
            userin_split = userin.split(" ")

            if userin == "p":
                visualize.summary(calculate.budget(budgets.budget))
            elif userin == "q":
                budgetfile.write(path, budgets.budget)
                break
            elif userin == "l":
                visualize.list(budgets.budget)
            elif userin == "t":
                print(budgets.budget)
            else:
                amount = userin_split[0]
                purpose = userin_split[1]
                budgets.budget.extend([transaction.new(amount, purpose)])
        """
    except KeyboardInterrupt:
        print("\nAborting - No changes have been made.")
    except FileNotFoundError:
        print(path + " not found.")
    except PermissionError:
        print("Permission denied: "+ path)
