#!/usr/bin/env python3
import os, shutil, pickle, datetime
import urllib.request

try:
    import readline
except:
    pass

### PRECIOUS VARIABLES ###
date = datetime.date.today().strftime("%Y-%m-%d")
month = datetime.date.today().strftime("%Y-%m")
last_month = datetime.date.today().replace(day=1) - datetime.timedelta(days=1)
last_month = last_month.strftime("%Y-%m")
day = datetime.date.today().strftime("%d")

# get currency rate
nok_rate = None
try:
    currency_api_url = "https://ratesapi.io/api/latest?symbols=EUR,NOK"
    rate_eur_nok = urllib.request.urlopen(currency_api_url)
    nok_rate = eval(rate_eur_nok.read().decode('utf-8'))["rates"]["NOK"]
    print("NOK currency conversion available!")
except:
    pass

help_text = """
budget - Simple Budgeting Manager
v. 0.9

Transaction syntax:
> amount(nok) purpose
or:
> m amount(nok) purpose

Other commands:

h/help - help screen
undo/undo monthly - undo last transaction
l/lm - list transactions
t - list transactions raw
p - visualize budget
clear - clear transaction database

Transaction database path:
DEFAULT = /user/home/.budget
BACKUP = /user/home/.budget.edit # only last state !!!
"""

### BUDGET FILE ###
budget_path = os.getenv("HOME") + "/.budget"

### COLORS ###
colors = { "red": "\33[31m", "green": "\33[32m", "redbg": "\33[41m",
           "greenbg": "\33[42m", "cend": "\33[0m" , "noc" : ""}

### SPECIAL CHARACTERS ###
schar = { "box": u"\u2588" }

### INIT FINANCIAL DATA LISTS ###
monthly_transactions = []
transactions = []
monthly_total = []

# load and backup budgetfile
try:
    shutil.copy(budget_path, budget_path + ".edit")
    bfile = pickle.load(open(budget_path,"rb"))
    monthly_transactions = bfile[0]
    transactions = bfile[1]
    monthly_total = bfile[2]
except:
    print("ERROR - Could not load " + budget_path + " , starting empty.")

# check if current month is in monthly_total, if not: add it # FIXME
if not any(month in total for total in monthly_total):
    monthly_total.append([month,0])

#################################################
#FUNCTIONS
#################################################

def print_currency(value_eur):
    global nok_rate
    if nok_rate:
        value_nok = value_eur * nok_rate
        value_nok = int(round(value_nok))
        str_rate = "NOK " + str(value_nok) + " EUR " + str(value_eur)
        return(str_rate)
    else:
        return str(value_eur)

def convert_to_eur(amount):
    global nok_rate
    if "nok" in str(amount):
        amount = amount.replace("nok","")
        amount_eur = float(amount) / nok_rate
    else:
        amount_eur = float(amount)
    return amount_eur

# bigger (absolute)
def bigger(a,b):
    biggest = max(abs(a),abs(b))
    return biggest

# colored text
def colored_text(text,color):
    return colors[color] + str(text) + colors["cend"]

# print bar
def bar(length,color,label):
    bar = ""
    bar += colors[color]
    bar += schar["box"]*(int(length)-1)
    bar += colors["cend"]
    bar += schar["box"]
    bar += " " + str(label)
    return bar

# dump budgetfile
def dump_budget():
    try:
        pickle.dump([monthly_transactions,transactions,monthly_total],open(budget_path,"wb"))
    except:
        print("ERROR - Could not write to " + budget_path)

# transaction
def transaction(amount,purpose):
    amount = round(float(amount),2)
    transactions.append([amount,month,day,purpose])
    dump_budget()

# monthly transaction
def monthly_transaction(amount,purpose):
    amount = round(float(amount),2)
    monthly_transactions.append([amount,purpose])
    dump_budget()

# undo !!! UPDATE
def undo():
    try:
        del transactions[-1]
        dump_budget()
    except:
        print("ERROR - No Transactions to undo.")

# undo monthly
def undo_monthly():
    try:
        del monthly_transactions[-1]
        dump_budget()
    except:
        print("ERROR - No Transactions to undo.")

# calculate budget
def calculate_monthly_budget():
    saldo = 0
    income = 0
    expenses = 0

    global monthly_total

    # add last month's total from monthly_total
    for total in monthly_total:
        if total[0] == last_month:
            saldo += total[1]

    # loop through transactions and sum/sort to saldo,income,expenses
    for transaction in transactions:
        t_amount = transaction[0]
        t_month = transaction[1]
        if t_month == month:
            saldo += t_amount
            if t_amount > 0:
                income += t_amount
            elif t_amount < 0:
                expenses += t_amount

    # loop through monthly transactions and sum/sort to saldo,income,expenses
    for monthly_transaction in monthly_transactions:
        t_amount = monthly_transaction[0]
        saldo += t_amount
        if t_amount > 0:
            income += t_amount
        elif t_amount < 0:
            expenses += t_amount

    # round to 2 decimals
    saldo = round(saldo, 2)
    income = round(income, 2)
    expenses = round(expenses, 2)

    # push saldo to monthly_total
    new_monthly_total = []
    for total in monthly_total:
        if total[0] == month:
            total = [month,saldo]
        new_monthly_total.append(total)
    monthly_total = new_monthly_total

    return saldo,income,expenses

# print budget as bars
def visualize_monthly_budget(calc_input):
    saldo = calc_input[0]
    str_saldo = print_currency(saldo)
    income = calc_input[1]
    expenses = calc_input[2]

    print("\nBudget for " + month + ":\n")

    # print saldo
    if saldo < 0:
        print("Saldo " + colored_text(str_saldo,"red")+ "\n")
    else:
        print("Saldo " + colored_text(str_saldo,"green") + "\n")

    # print income/expenses bars # HACK: SCALING
    scale_fac = str(int(bigger(income,expenses)))
    bar_len = int( str(int(scale_fac[0])+1) + "0"*(len(scale_fac)-1) )
    term_bar_len = shutil.get_terminal_size((80,20))[0]
    if term_bar_len > 80:
        term_bar_len = 80
    income_bar_len = (income/bar_len)*term_bar_len - 10
    expenses_bar_len = (abs(expenses)/bar_len)*term_bar_len - 10

    # "axis"
    #print(" "*99 + schar["box"] + " " + str(bar_len))

    # bars
    print(bar(income_bar_len,"green", income))
    print(bar(expenses_bar_len,"red", expenses))

    print()

# print all transactions
def list_transactions():
    print()
    for transaction in transactions:
        date = transaction[1]+"-"+transaction[2]
        amount = transaction[0]
        purpose = transaction[3]
        if amount < 0:
            print(colored_text(amount,"red") + " " + date + " " + purpose)
        else:
            print(colored_text(amount,"green") + " " + date + " " + purpose)
    print()

# print monthly transactions
def list_monthly_transactions():
    print()
    for transaction in monthly_transactions:
        amount = transaction[0]
        purpose = transaction[1]
        if amount < 0:
            print(colored_text(amount,"red") + " " + purpose)
        else:
            print(colored_text(amount,"green") + " " + purpose)
    print()

# clear "database"
def clear_transactions():
    print("\nAre you sure? (y/n)")
    userin = input(" > ")
    if userin == "y":
        global monthly_transactions
        global transactions
        global monthly_total
        monthly_transactions = []
        transactions = []
        monthly_total = []
    else:
        print("Aborting mission!")

# inital calculation + visualization + dumping values
visualize_monthly_budget(calculate_monthly_budget())

# main loop <-- make pretty/elegant maybe dictionary based
while True:
    userin = input(date + " > ")
    userin_split = userin.split(" ")
    if userin == "q":
        calculate_monthly_budget()
        dump_budget()
        break
    elif userin == "undo":
        undo()
    elif userin == "undo monthly":
        undo_monthly()
    elif userin == "t":
        print(transactions)
        print()
        print(monthly_transactions)
        print()
        print(monthly_total)
    elif userin == "l":
        list_transactions()
    elif userin == "lm":
        list_monthly_transactions()
    elif userin == "p":
        visualize_monthly_budget(calculate_monthly_budget())
    elif userin == "clear":
        clear_transactions()
    elif userin_split[0] == "m":
        monthly_transaction(convert_to_eur(userin_split[1]),userin_split[2])
    elif userin == "help" or userin == "h":
        print(help_text)
    else: 
        transaction(convert_to_eur(userin_split[0]),userin_split[1])
